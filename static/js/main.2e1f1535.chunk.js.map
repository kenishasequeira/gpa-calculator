{"version":3,"sources":["AddClassButton.js","App.js","serviceWorker.js","index.js"],"names":["AddClassButton","finGPA","useState","courseName","grade","credits","inputList","setInputList","GPA","setGPA","count","setCount","show","setShow","handleClose","isCredits","handleInputChange","e","index","target","name","value","list","isNaN","parseInt","calculateGPA","handleAddClick","prevCount","totalCreds","totalCredits","reduce","prevValue","currentValue","parseFloat","calculateCredits","Math","round","map","x","i","placeholder","onChange","type","min","step","length","Button","variant","onClick","splice","handleRemoveClick","className","size","Modal","onHide","Header","closeButton","Title","Body","Footer","JSON","stringify","App","Helmet","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e1f1535.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport React, { useState } from 'react';\r\n\r\nexport default function AddClassButton(){\r\n  const [inputList, setInputList] = useState([{ courseName: \"\", grade: \"\", credits: \"\" }]);\r\n  const [GPA, setGPA] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  var isCredits = false;\r\n\r\n  // handles input change\r\n  const handleInputChange = (e, index) => {\r\n    const { name, value } = e.target;\r\n    const list = [...inputList];\r\n    list[index][name] = value;\r\n    //to know if credits are null to prevent calculation errors\r\n    if(isNaN(parseInt(list[index].credits))){\r\n      isCredits = false;\r\n    }\r\n    else{\r\n      isCredits = true;\r\n    }\r\n    setInputList(list);\r\n    calculateGPA(list);\r\n  };\r\n\r\n  // handle click event of the Remove button\r\n  const handleRemoveClick = index => {\r\n    setCount(prevCount => prevCount - 1)\r\n    const list = [...inputList];\r\n    list.splice(index, 1);\r\n    setInputList(list);\r\n    isCredits = true;\r\n    calculateGPA(list);\r\n  };\r\n\r\n// handle click event of the Add button\r\nconst handleAddClick = () => {\r\n  setCount(prevCount => prevCount + 1);//counts the number of fields in the form for resetting purposes\r\n  setInputList([...inputList, { courseName: \"\", grade: \"\", credits: \"\" }]);\r\n};\r\n\r\n//calculate total number of credits\r\nvar totalCreds = 1;\r\nconst calculateCredits = (inputList) => {\r\n   const totalCredits = inputList.reduce(\r\n    (prevValue, currentValue) => prevValue + parseFloat(currentValue.credits), 0\r\n  );\r\n  totalCreds = totalCredits;\r\n}\r\n//calculate final gpa\r\nvar finGPA;\r\nconst calculateGPA = (inputList) => {\r\n  if(isCredits){\r\n    calculateCredits(inputList);\r\n  }\r\n  const GPA = inputList.reduce(\r\n    (prevValue, currentValue) => prevValue + (parseFloat(currentValue.credits)*parseFloat(currentValue.grade)), 0\r\n  )\r\n  finGPA = GPA/parseFloat(totalCreds);\r\n  finGPA = Math.round(finGPA*100)/100;\r\n  if(isNaN(finGPA)){\r\n    setGPA(\"KINDLY ENTER VALUES CORRECTLY\")\r\n  }\r\n  else{\r\n    setGPA(finGPA);\r\n  }\r\n}\r\n\r\n//resets inputList \r\nconst handleReset = () => {\r\n  return function(){\r\n    const list = [...inputList];\r\n    list.splice(0, count);\r\n    setInputList(list);\r\n    setCount(0);\r\n    setGPA(0);\r\n    setInputList([{courseName: '', grade: '', credits:''}]);\r\n    handleClose();\r\n  }\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    {inputList.map((x, i) => {  //loops through the entire inputList\r\n      return (\r\n        <div>\r\n          <input\r\n            name=\"courseName\"\r\n            placeholder=\"Enter Course Name\"\r\n            value={x.courseName}\r\n            onChange={e => handleInputChange(e, i)}\r\n          />\r\n          {'             '}\r\n          <select name=\"grade\" placeholder=\"Enter Grade\" value={x.grade} onChange={e => handleInputChange(e, i)}>\r\n            <option value=\"0\">-</option>\r\n            <option value=\"4.0\">A</option>\r\n            <option value=\"3.5\">B+</option>\r\n            <option value=\"3.0\">B</option>\r\n            <option value=\"2.5\">C+</option>\r\n            <option value=\"2.0\">C</option>\r\n            <option value=\"1.0\">D</option>\r\n            <option value=\"0.0\">F</option>\r\n          </select>\r\n          {'             '}\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.5\" step=\"0.5\"\r\n            name=\"credits\"\r\n            placeholder=\"Enter Credits\"\r\n            value={x.credits}\r\n            onChange={e => handleInputChange(e, i)}\r\n          /> \r\n          \r\n          {'             '}{inputList.length !== 1 && <Button variant=\"danger\" onClick={() => handleRemoveClick(i)}>X</Button>}<br/><br/>\r\n          <div className=\"btn-box\">    \r\n            {inputList.length - 1 === i && <Button variant=\"outline-danger\" size=\"lg\" onClick={handleAddClick}>Add Class</Button>}\r\n          </div>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n    \r\n    )}\r\n    \r\n    <div>\r\n        <br/>\r\n        <Button variant=\"outline-dark\" onClick={handleShow}>\r\n            RESET\r\n        </Button>\r\n\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Reset?</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>Are you sure you want to reset all information?</Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                No\r\n              </Button>\r\n              <Button variant=\"danger\" onClick={handleReset()}>\r\n                Yes\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n      </div>\r\n    <div>\r\n    <br/><br/>\r\n      <h5><i><b>Final GPA:</b></i> {JSON.stringify(GPA)}</h5> \r\n    </div>\r\n  </div>\r\n);\r\n\r\n  }\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AddClassButton from'./AddClassButton'\nimport {Helmet} from 'react-helmet';\n\nexport default class App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Helmet>\n               <style>{'body { background-color: bisque; }'}</style>\n        </Helmet>\n        <br/><br/>\n        <center className = \"Headings\"><h1><b><u>RU GPA Calculator</u></b></h1></center>\n        <br/>\n        <AddClassButton/>\n      </div>\n    );\n  }  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />, \n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}